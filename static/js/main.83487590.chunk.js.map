{"version":3,"sources":["sounds/clickSound.wav","components/MetronomeLight.js","components/MetronomeLightController.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","click","UIfx","clickAudio","throttleMs","Dot","styled","span","props","active","MetronomeLight","nextProps","nextState","this","console","log","setVolume","volume","play","Component","MetronomeLightController","setActiveIndex","tick","activeIndex","length","lights","index","push","key","className","React","App","interval","useRef","bpm","playStatus","useState","parseInt","current","bpmInputValue","setBpmInputValue","setTick","startTimer","ms","setInterval","resetTimer","clearInterval","togglePlayStop","handleBpmChange","e","delta","Container","handleKeys","onKeyEvent","handleFocusableElements","Row","Col","md","xs","Button","block","onKeyDown","preventDefault","onClick","value","onChange","string","target","parsedString","isNaN","num","offset","type","min","max","step","parseFloat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83487590.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clickSound.846642c7.wav\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport UIfx from 'uifx'\nimport clickAudio from '../sounds/clickSound.wav'\n\nconst click = new UIfx(\n    clickAudio,\n    {\n        // volume: 0.9, // number between 0.0 ~ 1.0\n        throttleMs: 100\n    }\n)\n\nconst Dot = styled.span`\n    height: 50px;\n    width: 50px;\n    background-color: ${props => props.active ? \"#000\" : \"#bbb\"};\n    border-radius: 50%;\n    display: inline-block;\n`;\n\nclass MetronomeLight extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.props.active === nextProps.active) {\n            return false;\n        }\n        return true;\n    }\n\n    render() {\n        console.log(\"Light rendering\");\n        if (this.props.active) {\n            console.log(\"sound\");\n            click.setVolume(this.props.volume).play();\n        }\n        return (\n            <Dot active={this.props.active}></Dot>\n        );\n    }\n}\n\nexport default MetronomeLight;","import React from 'react';\nimport MetronomeLight from './MetronomeLight'\n\nclass MetronomeLightController extends React.Component {\n    constructor(props) {\n        super(props);\n        this.activeIndex = -1;\n    }\n\n    /**\n     * Sets activeIndex to next index. Or resets activeIndex if tick is 0.\n     */\n    setActiveIndex = () => {\n        if (this.props.tick === -1) {\n            this.activeIndex = -1;\n        } else {\n            this.activeIndex = this.props.tick % this.props.length;\n        }\n    }\n\n    render() {\n        this.setActiveIndex();\n        console.log(`LightController Rendering \\n tick: ${this.props.tick} activeIndex: ${this.activeIndex}`);\n\n        let lights = [];\n\n        for (let index = 0; index < this.props.length; index++) {\n            let active = this.activeIndex === index;\n            lights.push(\n                <MetronomeLight key={index} active={active} volume={this.props.volume} />\n            );\n        }\n        return (\n            <span className=\"d-flex justify-content-between\">\n                {lights}\n            </span>\n        );\n    }\n}\n\nexport default MetronomeLightController;","import React, { useState, useRef } from 'react';\nimport './App.css';\nimport { Row, Col, Container, Button } from 'react-bootstrap';\nimport MetronomeLightController from './components/MetronomeLightController'\nimport KeyboardEventHandler from 'react-keyboard-event-handler'\n\nfunction App() {\n  const interval = useRef();\n  const bpm = useRef(100);\n  const playStatus = useRef(false);\n  const [volume, setVolume] = useState(.5);\n  const [bpmInputValue, setBpmInputValue] = useState(parseInt(bpm.current));\n  const [tick, setTick] = useState(-1); // must be state variable to re-render light controller\n\n  /**\n   * Sets tick to 0 and creats timer loop to increment tick.\n   */\n  const startTimer = () => {\n    console.log(\"play at bpm:\", bpm.current);\n\n    setTick(0); // cause re-render => play button: \"Stop\", metronome lights: 1st active\n    let ms = 60000 / bpm.current;\n    interval.current = setInterval(() => {\n      setTick(tick => tick + 1); // 1st iteration will run after interval time\n    }, ms);\n  }\n\n  /**\n   * Clears timer loop, set's tick to -1, leads to re-render.\n   */\n  const resetTimer = () => {\n    clearInterval(interval.current);\n    setTick(-1); // cause re-render of play button (to \"play\") and lights (to blank lights)\n  }\n\n  /**\n   * Toggle play stop\n   */\n  const togglePlayStop = () => {\n    console.log(\"toggling play stop\");\n    if (playStatus.current === true) {\n      playStatus.current = false;\n      resetTimer();\n    } else {\n      playStatus.current = true;\n      startTimer();\n\n    }\n  }\n\n  /**\n   * Runs when the input value changes. Does NOT run on initial \n   * render. Will set state var to either empty string or num\n   * between specified values. Otherwise, input value is unchanged.\n   * Then set bpm to integer from input value. Then plays the timer\n   * if the status was already playing.\n   */\n  const handleBpmInputChange = (e) => {\n    let string = e.target.value;\n    if (string === \"\") {\n      setBpmInputValue(\"\");\n      bpm.current = 0;\n    }\n\n    let parsedString = parseInt(string)\n    if (!isNaN(parsedString)) {\n      let num = parsedString;\n      if (num > 0 && num <= 200) {\n        setBpmInputValue(num);\n        bpm.current = num;\n        resetTimer(); // stop timer, set tick to 0\n        if (bpm.current > 0 && bpm.current <= 200 && playStatus.current === true) {\n          startTimer(); // set tick to 1, start timer\n          // Render with tick: 1, bpm: new bpm, \n        }\n      }\n    }\n  }\n\n  /**\n   * Set the volume\n   */\n  const handleVolumeChange = (e) => {\n    console.log(\"setting volume\");\n    setVolume(parseFloat(e.target.value));\n  }\n\n  /**\n   * Change bpm depending on delta\n   */\n  const handleBpmChange = (e, delta) => {\n    bpm.current = bpm.current + delta;\n    setBpmInputValue(bpm.current);\n    resetTimer();\n    if (playStatus.current === true) {\n      startTimer();\n    }\n  }\n\n  /**\n   * Prevents default. Used on buttons.\n   */\n  const preventDefault = (e) => {\n    e.preventDefault();\n  }\n\n  return (\n    <Container className=\"d-flex align-items-center justify-content-between flex-wrap\">\n\n      <KeyboardEventHandler handleKeys={['space']} onKeyEvent={togglePlayStop} handleFocusableElements={true} />\n\n      <Row>\n\n        {/* Spacer: None on mobile, Left for medium */}\n        <Col md={2} className=\"d-none d-sm-none d-md-block\">\n        </Col>\n\n        {/* Metronome full row on mobile, Middle for medium */}\n        <Col xs={12} md={8}>\n          <Row className=\"d-flex align-items-center justify-content-between flex-nowrap no-gutters\">\n            <Col xs={1} className=\"d-flex justify-content-center\">\n              <Button block onKeyDown={preventDefault} onClick={(e) => handleBpmChange(e, -5)}>-5</Button>\n            </Col>\n            <Col xs={1} className=\"d-flex justify-content-center\">\n              <Button block onClick={(e) => handleBpmChange(e, -1)}>-</Button>\n            </Col>\n\n            <Col xs={6} className=\"text-center\">\n              <input value={bpmInputValue} className=\"input-bpm\" onChange={handleBpmInputChange} />\n            </Col>\n\n            <Col xs={1} className=\"d-flex justify-content-center\">\n              <Button block onClick={(e) => handleBpmChange(e, 1)}>+</Button>\n            </Col>\n            <Col xs={1} className=\"d-flex justify-content-center\">\n              <Button block onClick={(e) => handleBpmChange(e, 5)}>+5</Button>\n            </Col>\n          </Row>\n\n          <Row className=\"d-flex justify-content-center row-metronome-lights\">\n            <Col xs={6} className=\"\">\n              <MetronomeLightController tick={tick} length={4} volume={volume} />\n            </Col>\n          </Row>\n\n          <Row className=\"d-flex justify-content-center\">\n            <Col xs={6} className=\"d-flex justify-content-center\">\n              <Button onClick={togglePlayStop}>\n                {!playStatus.current ? \"Play\" : \"Stop\"}\n              </Button>\n            </Col>\n          </Row>\n        </Col>\n\n        {/* Volume: full row on mobile, Right for medium */}\n        <Col xs={12} md={{ span: 1, offset: 1 }} className=\"d-flex justify-content-center py-4\">\n          <input type=\"range\" className=\"vert-input\" min=\"0.0\" max=\"1.0\" step=\"0.05\" value={volume}\n            onChange={handleVolumeChange} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}